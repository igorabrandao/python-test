-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

# Background:
 - This is a paid test.  You’ll be doing work we hope will be included in the project.  However, the primary purpose of this test is to help assess your development skills and get a sense of how we work together.
 - Before doing anything, confirm payment details with the test.

## Athena API Test (paid challenge / test):
1. Candidate must set up a repo I can push the existing code to
 * _This demonstrates you know something about git_
 * Key is at the bottom of instructions.
 * We’ll push code up once you tell us details of your repo.  We prefer it to be private
 * **If you're interested, send me the git repo first**  _This will demonstrate you read the instructions_

    * For Git invite me as schwartzb@gmail.com
    * For gitlab or bitbucket invite me as brian@athenabitcoin.com

2. After you get the code & set up the environment (see readme.md),  you should run setup.py test’ & see it complete with meaningful results
   a. (You have to have docker running; if you modify the readme.md file to make the relevant instructions better, bonus points.)

3. implement the ‘user_by_ref’ endpoint described in the swagger file (files\swagger\api.yml) & referenced by the template.yml.
   a. Have your new function return hardcoded fake data that is inline with the swagger file
   b. Model the code you produce to be similar to the ‘About’ Function
   c. Write at least one test.
      * You should use [mock](https://serverless.zone/unit-and-integration-testing-for-lambda-fc9510963003) if you know how 

4.  The test is intended to be short and sweet... don't spend more than an hour or two.

5.  Let me know when its done

   Public Key for git access:
ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAt5J7oDX4I8Wa0kHFKggVnl2YgZxyKMkjCLRWwDp/84KJSSdlr/sq0+EFiSexMowVjw3LQrAKshwCji0v/q8j0BD3Gn10mSOR5ZV3k2pCyg3Ok685nhfUBHG67th/GppKxjG0GYLUk0uROl65oXVFO/tHUkqZa4sCR/dZYmANaZG4edql+Tt47II6Nx6dV0JVqM6SoTg0h9Lf67jprc9D7kUATQS+9Kj6gyalWPljdlhwgXXWTR+6UGuI4I+jm8osyT0p9ko8hXynjEXTxix8YnNHoQaBTVSHTLclmAOeTkG9lZJm5aekFm3KD5+jPA1Y3s77B0zCwV9s6mVTpvRF4bH8arwhLH7iILbT4h3XSB2M8miCeDcx8l++sQdcyqvc5vWvPk+66uuCYXn9EWhZSDuiJKX+kWMGlLobPLZbdLkhLzJBePpd5Bm4M/RFloTThfIAHOr9GaTfh+5qOG0UAealiraoNkUlT5ka7BvELF//ZmI5PROBhT/lasfCd5nl0y0RPmm3GRW9xRGM2+JNC0IuYaPlI5aIgQndZXC5S8QrnaetY8YIe3smPlYDnGqlLkb/D2+U3RfAbVJeQ0kUxAShlZ9ImL0rluKcb9Jve+qvGMb9gfBalgR16luORDDffyVkjvEzNyYE6329Ub1n5J2Z+ynOmyu1k9+CXM0K8ok= imported-openssh-key
-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEE4oKVp9JdWKQFS03JBrj2XcxqDGEFAlyixU8ACgkQBrj2Xcxq
DGHKcQf/dhtjFTFzU32WpGqf6aH78Qq0Iskh+MxuAbmOxcCEOT62ZKw+QLunFSEW
YDkRsngoN3NV7vRpH1/1JYVXAhp7mR9dBc/nnXLlELK8ua2MSmo96U5YEASFhUWN
+3Bx0XNfHD6ZmnFEDrTud4hJO0psfUWJs7kYk2o+w2Ng4UOgi21vQuACALNCbJ5l
qO723nEOds+ZqsO/XswzORpPCRbQYAJ+xg7lomlEjYPP7oCzQd2rUt4lDp0HdfXP
EkBB++dMZGmgDEzQQB//ESuJzrmuy6TOjPoLdQVLzDEu2EcP+hpPQT8wbjs9hvAB
XdQ8aDLWh421GBvKpm2Ib1eyRBeJIw==
=0xRI
-----END PGP SIGNATURE-----
